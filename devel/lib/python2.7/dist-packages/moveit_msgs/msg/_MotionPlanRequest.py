"""autogenerated by genpy from moveit_msgs/MotionPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class MotionPlanRequest(genpy.Message):
  _md5sum = "6779a906ceae86ede3907cfe562fa56c"
  _type = "moveit_msgs/MotionPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# The scaling factor for optionally reducing the maximum joint velocities.
# Allowed values are in (0,1]. The maximum joint velocity specified
# in the robot model is multiplied by the factor. If outside valid range
# (imporantly, this includes it being set to 0.0), the factor is set to a
# default value of 1.0 internally (i.e. maximum joint velocity)
float64 max_velocity_scaling_factor

================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of 
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# a header, used for interpreting the poses
Header header

# the id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# the the collision geometries associated with the object;
# their poses are with respect to the specified header

# solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight
================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to 
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# optional axis-angle error tolerances specified
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible 
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides, 
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone 
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below 
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

"""
  __slots__ = ['workspace_parameters','start_state','goal_constraints','path_constraints','trajectory_constraints','planner_id','group_name','num_planning_attempts','allowed_planning_time','max_velocity_scaling_factor']
  _slot_types = ['moveit_msgs/WorkspaceParameters','moveit_msgs/RobotState','moveit_msgs/Constraints[]','moveit_msgs/Constraints','moveit_msgs/TrajectoryConstraints','string','string','int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       workspace_parameters,start_state,goal_constraints,path_constraints,trajectory_constraints,planner_id,group_name,num_planning_attempts,allowed_planning_time,max_velocity_scaling_factor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.workspace_parameters is None:
        self.workspace_parameters = moveit_msgs.msg.WorkspaceParameters()
      if self.start_state is None:
        self.start_state = moveit_msgs.msg.RobotState()
      if self.goal_constraints is None:
        self.goal_constraints = []
      if self.path_constraints is None:
        self.path_constraints = moveit_msgs.msg.Constraints()
      if self.trajectory_constraints is None:
        self.trajectory_constraints = moveit_msgs.msg.TrajectoryConstraints()
      if self.planner_id is None:
        self.planner_id = ''
      if self.group_name is None:
        self.group_name = ''
      if self.num_planning_attempts is None:
        self.num_planning_attempts = 0
      if self.allowed_planning_time is None:
        self.allowed_planning_time = 0.
      if self.max_velocity_scaling_factor is None:
        self.max_velocity_scaling_factor = 0.
    else:
      self.workspace_parameters = moveit_msgs.msg.WorkspaceParameters()
      self.start_state = moveit_msgs.msg.RobotState()
      self.goal_constraints = []
      self.path_constraints = moveit_msgs.msg.Constraints()
      self.trajectory_constraints = moveit_msgs.msg.TrajectoryConstraints()
      self.planner_id = ''
      self.group_name = ''
      self.num_planning_attempts = 0
      self.allowed_planning_time = 0.
      self.max_velocity_scaling_factor = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.workspace_parameters.header.seq, _x.workspace_parameters.header.stamp.secs, _x.workspace_parameters.header.stamp.nsecs))
      _x = self.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d3I.pack(_x.workspace_parameters.min_corner.x, _x.workspace_parameters.min_corner.y, _x.workspace_parameters.min_corner.z, _x.workspace_parameters.max_corner.x, _x.workspace_parameters.max_corner.y, _x.workspace_parameters.max_corner.z, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs))
      _x = self.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state.joint_state.position))
      length = len(self.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state.joint_state.velocity))
      length = len(self.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state.joint_state.effort))
      _x = self
      buff.write(_struct_3I.pack(_x.start_state.multi_dof_joint_state.header.seq, _x.start_state.multi_dof_joint_state.header.stamp.secs, _x.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        buff.write(_struct_I.pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v10 = _v7.type
        _x = _v10.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v10.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v11 = val3.position
          _x = _v11
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v12 = val3.orientation
          _x = _v12
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_struct_3I.pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v13 = val3.position
          _x = _v13
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v14 = val3.orientation
          _x = _v14
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_struct_4d.pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v15 = val3.position
          _x = _v15
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v16 = val3.orientation
          _x = _v16
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_b.pack(_v7.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
        _v17 = val1.detach_posture
        _v18 = _v17.header
        buff.write(_struct_I.pack(_v18.seq))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v17.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v17.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v17.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v17.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v20 = val3.time_from_start
          _x = _v20
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_d.pack(val1.weight))
      buff.write(_struct_B.pack(self.start_state.is_diff))
      length = len(self.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v21 = val2.header
          buff.write(_struct_I.pack(_v21.seq))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v23 = val2.target_point_offset
          _x = _v23
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v24 = val2.constraint_region
          length = len(_v24.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v24.primitives:
            buff.write(_struct_B.pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.dimensions))
          length = len(_v24.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v24.primitive_poses:
            _v25 = val4.position
            _x = _v25
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v26 = val4.orientation
            _x = _v26
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v24.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v24.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_struct_3I.pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          length = len(_v24.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v24.mesh_poses:
            _v27 = val4.position
            _x = _v27
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v28 = val4.orientation
            _x = _v28
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v29 = val2.header
          buff.write(_struct_I.pack(_v29.seq))
          _v30 = _v29.stamp
          _x = _v30
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v29.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v31 = val2.orientation
          _x = _v31
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_struct_d.pack(val2.target_radius))
          _v32 = val2.target_pose
          _v33 = _v32.header
          buff.write(_struct_I.pack(_v33.seq))
          _v34 = _v33.stamp
          _x = _v34
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v33.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v35 = _v32.pose
          _v36 = _v35.position
          _x = _v36
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v37 = _v35.orientation
          _x = _v37
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_i.pack(val2.cone_sides))
          _v38 = val2.sensor_pose
          _v39 = _v38.header
          buff.write(_struct_I.pack(_v39.seq))
          _v40 = _v39.stamp
          _x = _v40
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v39.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v41 = _v38.pose
          _v42 = _v41.position
          _x = _v42
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v43 = _v41.orientation
          _x = _v43
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.position_constraints:
        _v44 = val1.header
        buff.write(_struct_I.pack(_v44.seq))
        _v45 = _v44.stamp
        _x = _v45
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v44.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v46 = val1.target_point_offset
        _x = _v46
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v47 = val1.constraint_region
        length = len(_v47.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v47.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.primitive_poses:
          _v48 = val3.position
          _x = _v48
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v49 = val3.orientation
          _x = _v49
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v47.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_struct_3I.pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v47.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.mesh_poses:
          _v50 = val3.position
          _x = _v50
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v51 = val3.orientation
          _x = _v51
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.orientation_constraints:
        _v52 = val1.header
        buff.write(_struct_I.pack(_v52.seq))
        _v53 = _v52.stamp
        _x = _v53
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v52.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v54 = val1.orientation
        _x = _v54
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.visibility_constraints:
        buff.write(_struct_d.pack(val1.target_radius))
        _v55 = val1.target_pose
        _v56 = _v55.header
        buff.write(_struct_I.pack(_v56.seq))
        _v57 = _v56.stamp
        _x = _v57
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v56.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v58 = _v55.pose
        _v59 = _v58.position
        _x = _v59
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v60 = _v58.orientation
        _x = _v60
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_i.pack(val1.cone_sides))
        _v61 = val1.sensor_pose
        _v62 = _v61.header
        buff.write(_struct_I.pack(_v62.seq))
        _v63 = _v62.stamp
        _x = _v63
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v62.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v64 = _v61.pose
        _v65 = _v64.position
        _x = _v65
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v66 = _v64.orientation
        _x = _v66
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v67 = val2.header
          buff.write(_struct_I.pack(_v67.seq))
          _v68 = _v67.stamp
          _x = _v68
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v67.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v69 = val2.target_point_offset
          _x = _v69
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v70 = val2.constraint_region
          length = len(_v70.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v70.primitives:
            buff.write(_struct_B.pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.dimensions))
          length = len(_v70.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v70.primitive_poses:
            _v71 = val4.position
            _x = _v71
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v72 = val4.orientation
            _x = _v72
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v70.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v70.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_struct_3I.pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          length = len(_v70.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v70.mesh_poses:
            _v73 = val4.position
            _x = _v73
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v74 = val4.orientation
            _x = _v74
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v75 = val2.header
          buff.write(_struct_I.pack(_v75.seq))
          _v76 = _v75.stamp
          _x = _v76
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v75.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v77 = val2.orientation
          _x = _v77
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_struct_d.pack(val2.target_radius))
          _v78 = val2.target_pose
          _v79 = _v78.header
          buff.write(_struct_I.pack(_v79.seq))
          _v80 = _v79.stamp
          _x = _v80
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v79.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v81 = _v78.pose
          _v82 = _v81.position
          _x = _v82
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v83 = _v81.orientation
          _x = _v83
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_i.pack(val2.cone_sides))
          _v84 = val2.sensor_pose
          _v85 = _v84.header
          buff.write(_struct_I.pack(_v85.seq))
          _v86 = _v85.stamp
          _x = _v86
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v85.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v87 = _v84.pose
          _v88 = _v87.position
          _x = _v88
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v89 = _v87.orientation
          _x = _v89
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2d.pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.workspace_parameters is None:
        self.workspace_parameters = moveit_msgs.msg.WorkspaceParameters()
      if self.start_state is None:
        self.start_state = moveit_msgs.msg.RobotState()
      if self.goal_constraints is None:
        self.goal_constraints = None
      if self.path_constraints is None:
        self.path_constraints = moveit_msgs.msg.Constraints()
      if self.trajectory_constraints is None:
        self.trajectory_constraints = moveit_msgs.msg.TrajectoryConstraints()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.workspace_parameters.header.seq, _x.workspace_parameters.header.stamp.secs, _x.workspace_parameters.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace_parameters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.workspace_parameters.min_corner.x, _x.workspace_parameters.min_corner.y, _x.workspace_parameters.min_corner.z, _x.workspace_parameters.max_corner.x, _x.workspace_parameters.max_corner.y, _x.workspace_parameters.max_corner.z, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs,) = _struct_6d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.start_state.multi_dof_joint_state.header.seq, _x.start_state.multi_dof_joint_state.header.stamp.secs, _x.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v90 = val1.translation
        _x = _v90
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v91 = val1.rotation
        _x = _v91
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v92 = val1.linear
        _x = _v92
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v93 = val1.angular
        _x = _v93
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v94 = val1.force
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v95 = val1.torque
        _x = _v95
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v96 = val1.object
        _v97 = _v96.header
        start = end
        end += 4
        (_v97.seq,) = _struct_I.unpack(str[start:end])
        _v98 = _v97.stamp
        _x = _v98
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.frame_id = str[start:end].decode('utf-8')
        else:
          _v97.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v96.id = str[start:end].decode('utf-8')
        else:
          _v96.id = str[start:end]
        _v99 = _v96.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v99.key = str[start:end].decode('utf-8')
        else:
          _v99.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v99.db = str[start:end].decode('utf-8')
        else:
          _v99.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v96.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v100 = val3.position
          _x = _v100
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v101 = val3.orientation
          _x = _v101
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v96.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _struct_3I.unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v96.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v102 = val3.position
          _x = _v102
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v103 = val3.orientation
          _x = _v103
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v96.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _struct_4d.unpack(str[start:end])
          _v96.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v104 = val3.position
          _x = _v104
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v105 = val3.orientation
          _x = _v105
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v96.plane_poses.append(val3)
        start = end
        end += 1
        (_v96.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v106 = val1.detach_posture
        _v107 = _v106.header
        start = end
        end += 4
        (_v107.seq,) = _struct_I.unpack(str[start:end])
        _v108 = _v107.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v107.frame_id = str[start:end].decode('utf-8')
        else:
          _v107.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v106.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v106.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v106.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v109 = val3.time_from_start
          _x = _v109
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v106.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.start_state.is_diff,) = _struct_B.unpack(str[start:end])
      self.start_state.is_diff = bool(self.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v110 = val2.header
          start = end
          end += 4
          (_v110.seq,) = _struct_I.unpack(str[start:end])
          _v111 = _v110.stamp
          _x = _v111
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v110.frame_id = str[start:end].decode('utf-8')
          else:
            _v110.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v112 = val2.target_point_offset
          _x = _v112
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v113 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v113.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _struct_B.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = struct.unpack(pattern, str[start:end])
            _v113.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v113.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v114 = val4.position
            _x = _v114
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v115 = val4.orientation
            _x = _v115
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v113.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v113.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _struct_3I.unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
              val4.vertices.append(val5)
            _v113.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v113.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v116 = val4.position
            _x = _v116
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v117 = val4.orientation
            _x = _v117
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v113.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _struct_d.unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v118 = val2.header
          start = end
          end += 4
          (_v118.seq,) = _struct_I.unpack(str[start:end])
          _v119 = _v118.stamp
          _x = _v119
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v118.frame_id = str[start:end].decode('utf-8')
          else:
            _v118.frame_id = str[start:end]
          _v120 = val2.orientation
          _x = _v120
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _struct_d.unpack(str[start:end])
          _v121 = val2.target_pose
          _v122 = _v121.header
          start = end
          end += 4
          (_v122.seq,) = _struct_I.unpack(str[start:end])
          _v123 = _v122.stamp
          _x = _v123
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v122.frame_id = str[start:end].decode('utf-8')
          else:
            _v122.frame_id = str[start:end]
          _v124 = _v121.pose
          _v125 = _v124.position
          _x = _v125
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v126 = _v124.orientation
          _x = _v126
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _struct_i.unpack(str[start:end])
          _v127 = val2.sensor_pose
          _v128 = _v127.header
          start = end
          end += 4
          (_v128.seq,) = _struct_I.unpack(str[start:end])
          _v129 = _v128.stamp
          _x = _v129
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v128.frame_id = str[start:end].decode('utf-8')
          else:
            _v128.frame_id = str[start:end]
          _v130 = _v127.pose
          _v131 = _v130.position
          _x = _v131
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v132 = _v130.orientation
          _x = _v132
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v133 = val1.header
        start = end
        end += 4
        (_v133.seq,) = _struct_I.unpack(str[start:end])
        _v134 = _v133.stamp
        _x = _v134
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.frame_id = str[start:end].decode('utf-8')
        else:
          _v133.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v135 = val1.target_point_offset
        _x = _v135
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v136 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v136.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v136.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v136.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v137 = val3.position
          _x = _v137
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v138 = val3.orientation
          _x = _v138
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v136.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v136.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _struct_3I.unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v136.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v136.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v139 = val3.position
          _x = _v139
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v140 = val3.orientation
          _x = _v140
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v136.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v141 = val1.header
        start = end
        end += 4
        (_v141.seq,) = _struct_I.unpack(str[start:end])
        _v142 = _v141.stamp
        _x = _v142
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v141.frame_id = str[start:end].decode('utf-8')
        else:
          _v141.frame_id = str[start:end]
        _v143 = val1.orientation
        _x = _v143
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _struct_d.unpack(str[start:end])
        _v144 = val1.target_pose
        _v145 = _v144.header
        start = end
        end += 4
        (_v145.seq,) = _struct_I.unpack(str[start:end])
        _v146 = _v145.stamp
        _x = _v146
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v145.frame_id = str[start:end].decode('utf-8')
        else:
          _v145.frame_id = str[start:end]
        _v147 = _v144.pose
        _v148 = _v147.position
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v149 = _v147.orientation
        _x = _v149
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _struct_i.unpack(str[start:end])
        _v150 = val1.sensor_pose
        _v151 = _v150.header
        start = end
        end += 4
        (_v151.seq,) = _struct_I.unpack(str[start:end])
        _v152 = _v151.stamp
        _x = _v152
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.frame_id = str[start:end].decode('utf-8')
        else:
          _v151.frame_id = str[start:end]
        _v153 = _v150.pose
        _v154 = _v153.position
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v155 = _v153.orientation
        _x = _v155
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
        self.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v156 = val2.header
          start = end
          end += 4
          (_v156.seq,) = _struct_I.unpack(str[start:end])
          _v157 = _v156.stamp
          _x = _v157
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v156.frame_id = str[start:end].decode('utf-8')
          else:
            _v156.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v158 = val2.target_point_offset
          _x = _v158
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v159 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v159.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _struct_B.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = struct.unpack(pattern, str[start:end])
            _v159.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v159.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v160 = val4.position
            _x = _v160
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v161 = val4.orientation
            _x = _v161
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v159.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v159.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _struct_3I.unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
              val4.vertices.append(val5)
            _v159.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v159.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v162 = val4.position
            _x = _v162
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v163 = val4.orientation
            _x = _v163
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v159.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _struct_d.unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v164 = val2.header
          start = end
          end += 4
          (_v164.seq,) = _struct_I.unpack(str[start:end])
          _v165 = _v164.stamp
          _x = _v165
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v164.frame_id = str[start:end].decode('utf-8')
          else:
            _v164.frame_id = str[start:end]
          _v166 = val2.orientation
          _x = _v166
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _struct_d.unpack(str[start:end])
          _v167 = val2.target_pose
          _v168 = _v167.header
          start = end
          end += 4
          (_v168.seq,) = _struct_I.unpack(str[start:end])
          _v169 = _v168.stamp
          _x = _v169
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v168.frame_id = str[start:end].decode('utf-8')
          else:
            _v168.frame_id = str[start:end]
          _v170 = _v167.pose
          _v171 = _v170.position
          _x = _v171
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v172 = _v170.orientation
          _x = _v172
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _struct_i.unpack(str[start:end])
          _v173 = val2.sensor_pose
          _v174 = _v173.header
          start = end
          end += 4
          (_v174.seq,) = _struct_I.unpack(str[start:end])
          _v175 = _v174.stamp
          _x = _v175
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v174.frame_id = str[start:end].decode('utf-8')
          else:
            _v174.frame_id = str[start:end]
          _v176 = _v173.pose
          _v177 = _v176.position
          _x = _v177
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v178 = _v176.orientation
          _x = _v178
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_id = str[start:end].decode('utf-8')
      else:
        self.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8')
      else:
        self.group_name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor,) = _struct_i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.workspace_parameters.header.seq, _x.workspace_parameters.header.stamp.secs, _x.workspace_parameters.header.stamp.nsecs))
      _x = self.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d3I.pack(_x.workspace_parameters.min_corner.x, _x.workspace_parameters.min_corner.y, _x.workspace_parameters.min_corner.z, _x.workspace_parameters.max_corner.x, _x.workspace_parameters.max_corner.y, _x.workspace_parameters.max_corner.z, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs))
      _x = self.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.joint_state.position.tostring())
      length = len(self.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.joint_state.velocity.tostring())
      length = len(self.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.start_state.multi_dof_joint_state.header.seq, _x.start_state.multi_dof_joint_state.header.stamp.secs, _x.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.transforms:
        _v179 = val1.translation
        _x = _v179
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v180 = val1.rotation
        _x = _v180
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.twist:
        _v181 = val1.linear
        _x = _v181
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v182 = val1.angular
        _x = _v182
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.wrench:
        _v183 = val1.force
        _x = _v183
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v184 = val1.torque
        _x = _v184
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v185 = val1.object
        _v186 = _v185.header
        buff.write(_struct_I.pack(_v186.seq))
        _v187 = _v186.stamp
        _x = _v187
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v186.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v185.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v188 = _v185.type
        _x = _v188.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v188.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v185.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v185.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v185.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v185.primitive_poses:
          _v189 = val3.position
          _x = _v189
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v190 = val3.orientation
          _x = _v190
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v185.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v185.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v185.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v185.mesh_poses:
          _v191 = val3.position
          _x = _v191
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v192 = val3.orientation
          _x = _v192
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v185.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v185.planes:
          buff.write(val3.coef.tostring())
        length = len(_v185.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v185.plane_poses:
          _v193 = val3.position
          _x = _v193
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v194 = val3.orientation
          _x = _v194
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_b.pack(_v185.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
        _v195 = val1.detach_posture
        _v196 = _v195.header
        buff.write(_struct_I.pack(_v196.seq))
        _v197 = _v196.stamp
        _x = _v197
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v196.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v195.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v195.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v195.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v195.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v198 = val3.time_from_start
          _x = _v198
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_d.pack(val1.weight))
      buff.write(_struct_B.pack(self.start_state.is_diff))
      length = len(self.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v199 = val2.header
          buff.write(_struct_I.pack(_v199.seq))
          _v200 = _v199.stamp
          _x = _v200
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v199.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v201 = val2.target_point_offset
          _x = _v201
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v202 = val2.constraint_region
          length = len(_v202.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v202.primitives:
            buff.write(_struct_B.pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v202.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v202.primitive_poses:
            _v203 = val4.position
            _x = _v203
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v204 = val4.orientation
            _x = _v204
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v202.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v202.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          length = len(_v202.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v202.mesh_poses:
            _v205 = val4.position
            _x = _v205
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v206 = val4.orientation
            _x = _v206
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v207 = val2.header
          buff.write(_struct_I.pack(_v207.seq))
          _v208 = _v207.stamp
          _x = _v208
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v207.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v209 = val2.orientation
          _x = _v209
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_struct_d.pack(val2.target_radius))
          _v210 = val2.target_pose
          _v211 = _v210.header
          buff.write(_struct_I.pack(_v211.seq))
          _v212 = _v211.stamp
          _x = _v212
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v211.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v213 = _v210.pose
          _v214 = _v213.position
          _x = _v214
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v215 = _v213.orientation
          _x = _v215
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_i.pack(val2.cone_sides))
          _v216 = val2.sensor_pose
          _v217 = _v216.header
          buff.write(_struct_I.pack(_v217.seq))
          _v218 = _v217.stamp
          _x = _v218
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v217.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v219 = _v216.pose
          _v220 = _v219.position
          _x = _v220
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v221 = _v219.orientation
          _x = _v221
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.position_constraints:
        _v222 = val1.header
        buff.write(_struct_I.pack(_v222.seq))
        _v223 = _v222.stamp
        _x = _v223
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v222.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v224 = val1.target_point_offset
        _x = _v224
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v225 = val1.constraint_region
        length = len(_v225.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v225.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.primitive_poses:
          _v226 = val3.position
          _x = _v226
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v227 = val3.orientation
          _x = _v227
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v225.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v225.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.mesh_poses:
          _v228 = val3.position
          _x = _v228
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v229 = val3.orientation
          _x = _v229
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.orientation_constraints:
        _v230 = val1.header
        buff.write(_struct_I.pack(_v230.seq))
        _v231 = _v230.stamp
        _x = _v231
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v230.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v232 = val1.orientation
        _x = _v232
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.visibility_constraints:
        buff.write(_struct_d.pack(val1.target_radius))
        _v233 = val1.target_pose
        _v234 = _v233.header
        buff.write(_struct_I.pack(_v234.seq))
        _v235 = _v234.stamp
        _x = _v235
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v234.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v236 = _v233.pose
        _v237 = _v236.position
        _x = _v237
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v238 = _v236.orientation
        _x = _v238
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_i.pack(val1.cone_sides))
        _v239 = val1.sensor_pose
        _v240 = _v239.header
        buff.write(_struct_I.pack(_v240.seq))
        _v241 = _v240.stamp
        _x = _v241
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v240.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v242 = _v239.pose
        _v243 = _v242.position
        _x = _v243
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v244 = _v242.orientation
        _x = _v244
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v245 = val2.header
          buff.write(_struct_I.pack(_v245.seq))
          _v246 = _v245.stamp
          _x = _v246
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v245.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v247 = val2.target_point_offset
          _x = _v247
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v248 = val2.constraint_region
          length = len(_v248.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v248.primitives:
            buff.write(_struct_B.pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v248.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v248.primitive_poses:
            _v249 = val4.position
            _x = _v249
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v250 = val4.orientation
            _x = _v250
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v248.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v248.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          length = len(_v248.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v248.mesh_poses:
            _v251 = val4.position
            _x = _v251
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v252 = val4.orientation
            _x = _v252
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v253 = val2.header
          buff.write(_struct_I.pack(_v253.seq))
          _v254 = _v253.stamp
          _x = _v254
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v253.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v255 = val2.orientation
          _x = _v255
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_struct_d.pack(val2.target_radius))
          _v256 = val2.target_pose
          _v257 = _v256.header
          buff.write(_struct_I.pack(_v257.seq))
          _v258 = _v257.stamp
          _x = _v258
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v257.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v259 = _v256.pose
          _v260 = _v259.position
          _x = _v260
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v261 = _v259.orientation
          _x = _v261
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_i.pack(val2.cone_sides))
          _v262 = val2.sensor_pose
          _v263 = _v262.header
          buff.write(_struct_I.pack(_v263.seq))
          _v264 = _v263.stamp
          _x = _v264
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v263.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v265 = _v262.pose
          _v266 = _v265.position
          _x = _v266
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v267 = _v265.orientation
          _x = _v267
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2d.pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.workspace_parameters is None:
        self.workspace_parameters = moveit_msgs.msg.WorkspaceParameters()
      if self.start_state is None:
        self.start_state = moveit_msgs.msg.RobotState()
      if self.goal_constraints is None:
        self.goal_constraints = None
      if self.path_constraints is None:
        self.path_constraints = moveit_msgs.msg.Constraints()
      if self.trajectory_constraints is None:
        self.trajectory_constraints = moveit_msgs.msg.TrajectoryConstraints()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.workspace_parameters.header.seq, _x.workspace_parameters.header.stamp.secs, _x.workspace_parameters.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace_parameters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.workspace_parameters.min_corner.x, _x.workspace_parameters.min_corner.y, _x.workspace_parameters.min_corner.z, _x.workspace_parameters.max_corner.x, _x.workspace_parameters.max_corner.y, _x.workspace_parameters.max_corner.z, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs,) = _struct_6d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.start_state.multi_dof_joint_state.header.seq, _x.start_state.multi_dof_joint_state.header.stamp.secs, _x.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v268 = val1.translation
        _x = _v268
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v269 = val1.rotation
        _x = _v269
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v270 = val1.linear
        _x = _v270
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v271 = val1.angular
        _x = _v271
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v272 = val1.force
        _x = _v272
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v273 = val1.torque
        _x = _v273
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v274 = val1.object
        _v275 = _v274.header
        start = end
        end += 4
        (_v275.seq,) = _struct_I.unpack(str[start:end])
        _v276 = _v275.stamp
        _x = _v276
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v275.frame_id = str[start:end].decode('utf-8')
        else:
          _v275.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v274.id = str[start:end].decode('utf-8')
        else:
          _v274.id = str[start:end]
        _v277 = _v274.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v277.key = str[start:end].decode('utf-8')
        else:
          _v277.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v277.db = str[start:end].decode('utf-8')
        else:
          _v277.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v274.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v274.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v274.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v278 = val3.position
          _x = _v278
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v279 = val3.orientation
          _x = _v279
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v274.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v274.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v274.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v274.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v280 = val3.position
          _x = _v280
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v281 = val3.orientation
          _x = _v281
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v274.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v274.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v274.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v274.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v282 = val3.position
          _x = _v282
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v283 = val3.orientation
          _x = _v283
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v274.plane_poses.append(val3)
        start = end
        end += 1
        (_v274.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v284 = val1.detach_posture
        _v285 = _v284.header
        start = end
        end += 4
        (_v285.seq,) = _struct_I.unpack(str[start:end])
        _v286 = _v285.stamp
        _x = _v286
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v285.frame_id = str[start:end].decode('utf-8')
        else:
          _v285.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v284.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v287 = val3.time_from_start
          _x = _v287
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v284.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.start_state.is_diff,) = _struct_B.unpack(str[start:end])
      self.start_state.is_diff = bool(self.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v288 = val2.header
          start = end
          end += 4
          (_v288.seq,) = _struct_I.unpack(str[start:end])
          _v289 = _v288.stamp
          _x = _v289
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v288.frame_id = str[start:end].decode('utf-8')
          else:
            _v288.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v290 = val2.target_point_offset
          _x = _v290
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v291 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v291.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _struct_B.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v291.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v291.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v292 = val4.position
            _x = _v292
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v293 = val4.orientation
            _x = _v293
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v291.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v291.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
              val4.vertices.append(val5)
            _v291.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v291.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v294 = val4.position
            _x = _v294
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v295 = val4.orientation
            _x = _v295
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v291.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _struct_d.unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v296 = val2.header
          start = end
          end += 4
          (_v296.seq,) = _struct_I.unpack(str[start:end])
          _v297 = _v296.stamp
          _x = _v297
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v296.frame_id = str[start:end].decode('utf-8')
          else:
            _v296.frame_id = str[start:end]
          _v298 = val2.orientation
          _x = _v298
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _struct_d.unpack(str[start:end])
          _v299 = val2.target_pose
          _v300 = _v299.header
          start = end
          end += 4
          (_v300.seq,) = _struct_I.unpack(str[start:end])
          _v301 = _v300.stamp
          _x = _v301
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v300.frame_id = str[start:end].decode('utf-8')
          else:
            _v300.frame_id = str[start:end]
          _v302 = _v299.pose
          _v303 = _v302.position
          _x = _v303
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v304 = _v302.orientation
          _x = _v304
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _struct_i.unpack(str[start:end])
          _v305 = val2.sensor_pose
          _v306 = _v305.header
          start = end
          end += 4
          (_v306.seq,) = _struct_I.unpack(str[start:end])
          _v307 = _v306.stamp
          _x = _v307
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v306.frame_id = str[start:end].decode('utf-8')
          else:
            _v306.frame_id = str[start:end]
          _v308 = _v305.pose
          _v309 = _v308.position
          _x = _v309
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v310 = _v308.orientation
          _x = _v310
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v311 = val1.header
        start = end
        end += 4
        (_v311.seq,) = _struct_I.unpack(str[start:end])
        _v312 = _v311.stamp
        _x = _v312
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v311.frame_id = str[start:end].decode('utf-8')
        else:
          _v311.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v313 = val1.target_point_offset
        _x = _v313
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v314 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v314.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v314.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v314.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v315 = val3.position
          _x = _v315
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v316 = val3.orientation
          _x = _v316
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v314.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v314.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v314.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v314.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v317 = val3.position
          _x = _v317
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v318 = val3.orientation
          _x = _v318
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v314.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v319 = val1.header
        start = end
        end += 4
        (_v319.seq,) = _struct_I.unpack(str[start:end])
        _v320 = _v319.stamp
        _x = _v320
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v319.frame_id = str[start:end].decode('utf-8')
        else:
          _v319.frame_id = str[start:end]
        _v321 = val1.orientation
        _x = _v321
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _struct_d.unpack(str[start:end])
        _v322 = val1.target_pose
        _v323 = _v322.header
        start = end
        end += 4
        (_v323.seq,) = _struct_I.unpack(str[start:end])
        _v324 = _v323.stamp
        _x = _v324
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v323.frame_id = str[start:end].decode('utf-8')
        else:
          _v323.frame_id = str[start:end]
        _v325 = _v322.pose
        _v326 = _v325.position
        _x = _v326
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v327 = _v325.orientation
        _x = _v327
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _struct_i.unpack(str[start:end])
        _v328 = val1.sensor_pose
        _v329 = _v328.header
        start = end
        end += 4
        (_v329.seq,) = _struct_I.unpack(str[start:end])
        _v330 = _v329.stamp
        _x = _v330
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v329.frame_id = str[start:end].decode('utf-8')
        else:
          _v329.frame_id = str[start:end]
        _v331 = _v328.pose
        _v332 = _v331.position
        _x = _v332
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v333 = _v331.orientation
        _x = _v333
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
        self.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v334 = val2.header
          start = end
          end += 4
          (_v334.seq,) = _struct_I.unpack(str[start:end])
          _v335 = _v334.stamp
          _x = _v335
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v334.frame_id = str[start:end].decode('utf-8')
          else:
            _v334.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v336 = val2.target_point_offset
          _x = _v336
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v337 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v337.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _struct_B.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v337.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v337.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v338 = val4.position
            _x = _v338
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v339 = val4.orientation
            _x = _v339
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v337.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v337.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
              val4.vertices.append(val5)
            _v337.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v337.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v340 = val4.position
            _x = _v340
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v341 = val4.orientation
            _x = _v341
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v337.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _struct_d.unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v342 = val2.header
          start = end
          end += 4
          (_v342.seq,) = _struct_I.unpack(str[start:end])
          _v343 = _v342.stamp
          _x = _v343
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v342.frame_id = str[start:end].decode('utf-8')
          else:
            _v342.frame_id = str[start:end]
          _v344 = val2.orientation
          _x = _v344
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _struct_d.unpack(str[start:end])
          _v345 = val2.target_pose
          _v346 = _v345.header
          start = end
          end += 4
          (_v346.seq,) = _struct_I.unpack(str[start:end])
          _v347 = _v346.stamp
          _x = _v347
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v346.frame_id = str[start:end].decode('utf-8')
          else:
            _v346.frame_id = str[start:end]
          _v348 = _v345.pose
          _v349 = _v348.position
          _x = _v349
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v350 = _v348.orientation
          _x = _v350
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _struct_i.unpack(str[start:end])
          _v351 = val2.sensor_pose
          _v352 = _v351.header
          start = end
          end += 4
          (_v352.seq,) = _struct_I.unpack(str[start:end])
          _v353 = _v352.stamp
          _x = _v353
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v352.frame_id = str[start:end].decode('utf-8')
          else:
            _v352.frame_id = str[start:end]
          _v354 = _v351.pose
          _v355 = _v354.position
          _x = _v355
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v356 = _v354.orientation
          _x = _v356
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_id = str[start:end].decode('utf-8')
      else:
        self.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8')
      else:
        self.group_name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor,) = _struct_i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_i2d = struct.Struct("<i2d")
_struct_6d3I = struct.Struct("<6d3I")
_struct_2i = struct.Struct("<2i")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_b = struct.Struct("<b")
_struct_4d = struct.Struct("<4d")
_struct_2dBd = struct.Struct("<2dBd")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
