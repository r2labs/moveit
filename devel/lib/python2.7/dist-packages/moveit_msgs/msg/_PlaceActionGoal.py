"""autogenerated by genpy from moveit_msgs/PlaceActionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import octomap_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class PlaceActionGoal(genpy.Message):
  _md5sum = "facadaee390f685ed5e693ac12f5aa3d"
  _type = "moveit_msgs/PlaceActionGoal"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
PlaceGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: moveit_msgs/PlaceGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# An action for placing an object

# which group to be used to plan for grasping
string group_name

# the name that the attached object to place
string attached_object_name

# a list of possible transformations for placing the object
PlaceLocation[] place_locations

# if the user prefers setting the eef pose (same as in pick) rather than 
# the location of an end effector, this flag should be set to true
bool place_eef

# the name that the support surface (e.g. table) has in the collision world
# can be left empty if no name is available
string support_surface_name

# whether collisions between the gripper and the support surface should be acceptable
# during move from pre-place to place and during retreat. Collisions when moving to the
# pre-place location are still not allowed even if this is set to true.
bool allow_gripper_support_collision

# Optional constraints to be imposed on every point in the motion plan
Constraints path_constraints

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# an optional list of obstacles that we have semantic information about
# and that can be touched/pushed/moved in the course of grasping;
# CAREFUL: If the object name 'all' is used, collisions with all objects are disabled during the approach & lift.
string[] allowed_touch_objects

# The maximum amount of time the motion planner is allowed to plan for
float64 allowed_planning_time

# Planning options
PlanningOptions planning_options


================================================================================
MSG: moveit_msgs/PlaceLocation
# A name for this grasp
string id

# The internal posture of the hand for the grasp
# positions and efforts are used
trajectory_msgs/JointTrajectory post_place_posture

# The position of the end-effector for the grasp relative to a reference frame 
# (that is always specified elsewhere, not in this message)
geometry_msgs/PoseStamped place_pose

# The approach motion
GripperTranslation pre_place_approach

# The retreat motion
GripperTranslation post_place_retreat

# an optional list of obstacles that we have semantic information about
# and that can be touched/pushed/moved in the course of grasping
string[] allowed_touch_objects

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: moveit_msgs/GripperTranslation
# defines a translation for the gripper, used in pickup or place tasks
# for example for lifting an object off a table or approaching the table for placing

# the direction of the translation
geometry_msgs/Vector3Stamped direction

# the desired translation distance
float32 desired_distance

# the min distance that must be considered feasible before the
# grasp is even attempted
float32 min_distance

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight
================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to 
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# optional axis-angle error tolerances specified
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible 
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides, 
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone 
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below 
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PlanningOptions

# The diff to consider for the planning scene (optional)
PlanningScene planning_scene_diff

# If this flag is set to true, the action
# returns an executable plan in the response but does not attempt execution  
bool plan_only

# If this flag is set to true, the action of planning &
# executing is allowed to look around  (move sensors) if
# it seems that not enough information is available about
# the environment
bool look_around

# If this value is positive, the action of planning & executing
# is allowed to look around for a maximum number of attempts;
# If the value is left as 0, the default value is used, as set
# with dynamic_reconfigure
int32 look_around_attempts

# If set and if look_around is true, this value is used as
# the maximum cost allowed for a path to be considered executable.
# If the cost of a path is higher than this value, more sensing or 
# a new plan needed. If left as 0.0 but look_around is true, then 
# the default value set via dynamic_reconfigure is used
float64 max_safe_execution_cost

# If the plan becomes invalidated during execution, it is possible to have
# that plan recomputed and execution restarted. This flag enables this
# functionality 
bool replan

# The maximum number of replanning attempts 
int32 replan_attempts

# The amount of time to wait in between replanning attempts (in seconds)
float64 replan_delay

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have 
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# a header, used for interpreting the poses
Header header

# the id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# the the collision geometries associated with the object;
# their poses are with respect to the specified header

# solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://www.ros.org/wiki/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have 
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list 
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data

"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalID','moveit_msgs/PlaceGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlaceActionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = moveit_msgs.msg.PlaceGoal()
    else:
      self.header = std_msgs.msg.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = moveit_msgs.msg.PlaceGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.attached_object_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.place_locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.place_locations:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.post_place_posture
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v1.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v4 = val3.time_from_start
          _x = _v4
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v5 = val1.place_pose
        _v6 = _v5.header
        buff.write(_struct_I.pack(_v6.seq))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v8 = _v5.pose
        _v9 = _v8.position
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v11 = val1.pre_place_approach
        _v12 = _v11.direction
        _v13 = _v12.header
        buff.write(_struct_I.pack(_v13.seq))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v15 = _v12.vector
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v11
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v16 = val1.post_place_retreat
        _v17 = _v16.direction
        _v18 = _v17.header
        buff.write(_struct_I.pack(_v18.seq))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v20 = _v17.vector
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v16
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        length = len(val1.allowed_touch_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.allowed_touch_objects:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
      buff.write(_struct_B.pack(self.goal.place_eef))
      _x = self.goal.support_surface_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.goal.allow_gripper_support_collision))
      _x = self.goal.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.position_constraints:
        _v21 = val1.header
        buff.write(_struct_I.pack(_v21.seq))
        _v22 = _v21.stamp
        _x = _v22
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v21.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v23 = val1.target_point_offset
        _x = _v23
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v24 = val1.constraint_region
        length = len(_v24.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v24.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.primitive_poses:
          _v25 = val3.position
          _x = _v25
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v26 = val3.orientation
          _x = _v26
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v24.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_struct_3I.pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v24.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.mesh_poses:
          _v27 = val3.position
          _x = _v27
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v28 = val3.orientation
          _x = _v28
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.orientation_constraints:
        _v29 = val1.header
        buff.write(_struct_I.pack(_v29.seq))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v31 = val1.orientation
        _x = _v31
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.goal.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.visibility_constraints:
        buff.write(_struct_d.pack(val1.target_radius))
        _v32 = val1.target_pose
        _v33 = _v32.header
        buff.write(_struct_I.pack(_v33.seq))
        _v34 = _v33.stamp
        _x = _v34
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v35 = _v32.pose
        _v36 = _v35.position
        _x = _v36
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v37 = _v35.orientation
        _x = _v37
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_i.pack(val1.cone_sides))
        _v38 = val1.sensor_pose
        _v39 = _v38.header
        buff.write(_struct_I.pack(_v39.seq))
        _v40 = _v39.stamp
        _x = _v40
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v39.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v41 = _v38.pose
        _v42 = _v41.position
        _x = _v42
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v43 = _v41.orientation
        _x = _v43
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.goal.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.allowed_touch_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.allowed_touch_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_d.pack(self.goal.allowed_planning_time))
      _x = self.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.planning_options.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v44 = val1.translation
        _x = _v44
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v45 = val1.rotation
        _x = _v45
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v46 = val1.linear
        _x = _v46
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v47 = val1.angular
        _x = _v47
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v48 = val1.force
        _x = _v48
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v49 = val1.torque
        _x = _v49
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v50 = val1.object
        _v51 = _v50.header
        buff.write(_struct_I.pack(_v51.seq))
        _v52 = _v51.stamp
        _x = _v52
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v51.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v50.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v53 = _v50.type
        _x = _v53.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v53.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v50.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v50.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.primitive_poses:
          _v54 = val3.position
          _x = _v54
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v55 = val3.orientation
          _x = _v55
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v50.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_struct_3I.pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v50.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.mesh_poses:
          _v56 = val3.position
          _x = _v56
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v57 = val3.orientation
          _x = _v57
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v50.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.planes:
          buff.write(_struct_4d.pack(*val3.coef))
        length = len(_v50.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.plane_poses:
          _v58 = val3.position
          _x = _v58
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v59 = val3.orientation
          _x = _v59
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_b.pack(_v50.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
        _v60 = val1.detach_posture
        _v61 = _v60.header
        buff.write(_struct_I.pack(_v61.seq))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v60.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v60.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v60.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v60.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v63 = val3.time_from_start
          _x = _v63
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_d.pack(val1.weight))
      buff.write(_struct_B.pack(self.goal.planning_options.planning_scene_diff.robot_state.is_diff))
      _x = self.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v64 = val1.header
        buff.write(_struct_I.pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v66 = val1.transform
        _v67 = _v66.translation
        _x = _v67
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v68 = _v66.rotation
        _x = _v68
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *val1.enabled))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      length = len(self.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.padding))
      length = len(self.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.scale))
      length = len(self.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v69 = val1.color
        _x = _v69
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v70 = val1.header
        buff.write(_struct_I.pack(_v70.seq))
        _v71 = _v70.stamp
        _x = _v71
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v70.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v72 = val1.type
        _x = _v72.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v72.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_struct_B.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v73 = val2.position
          _x = _v73
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v74 = val2.orientation
          _x = _v74
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_struct_3I.pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v75 = val2.position
          _x = _v75
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v76 = val2.orientation
          _x = _v76
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_struct_4d.pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v77 = val2.position
          _x = _v77
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v78 = val2.orientation
          _x = _v78
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_b.pack(val1.operation))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary))
      _x = self.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution))
      length = len(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.goal.planning_options.planning_scene_diff.world.octomap.octomap.data))
      _x = self
      buff.write(_struct_3BidBid.pack(_x.goal.planning_options.planning_scene_diff.is_diff, _x.goal.planning_options.plan_only, _x.goal.planning_options.look_around, _x.goal.planning_options.look_around_attempts, _x.goal.planning_options.max_safe_execution_cost, _x.goal.planning_options.replan, _x.goal.planning_options.replan_attempts, _x.goal.planning_options.replan_delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = moveit_msgs.msg.PlaceGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.group_name = str[start:end].decode('utf-8')
      else:
        self.goal.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.attached_object_name = str[start:end].decode('utf-8')
      else:
        self.goal.attached_object_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.place_locations = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PlaceLocation()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v79 = val1.post_place_posture
        _v80 = _v79.header
        start = end
        end += 4
        (_v80.seq,) = _struct_I.unpack(str[start:end])
        _v81 = _v80.stamp
        _x = _v81
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v80.frame_id = str[start:end].decode('utf-8')
        else:
          _v80.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v79.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v79.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v79.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v82 = val3.time_from_start
          _x = _v82
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v79.points.append(val3)
        _v83 = val1.place_pose
        _v84 = _v83.header
        start = end
        end += 4
        (_v84.seq,) = _struct_I.unpack(str[start:end])
        _v85 = _v84.stamp
        _x = _v85
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.frame_id = str[start:end].decode('utf-8')
        else:
          _v84.frame_id = str[start:end]
        _v86 = _v83.pose
        _v87 = _v86.position
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v88 = _v86.orientation
        _x = _v88
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v89 = val1.pre_place_approach
        _v90 = _v89.direction
        _v91 = _v90.header
        start = end
        end += 4
        (_v91.seq,) = _struct_I.unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8')
        else:
          _v91.frame_id = str[start:end]
        _v93 = _v90.vector
        _x = _v93
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v89
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v94 = val1.post_place_retreat
        _v95 = _v94.direction
        _v96 = _v95.header
        start = end
        end += 4
        (_v96.seq,) = _struct_I.unpack(str[start:end])
        _v97 = _v96.stamp
        _x = _v97
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v96.frame_id = str[start:end].decode('utf-8')
        else:
          _v96.frame_id = str[start:end]
        _v98 = _v95.vector
        _x = _v98
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v94
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.allowed_touch_objects = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.allowed_touch_objects.append(val2)
        self.goal.place_locations.append(val1)
      start = end
      end += 1
      (self.goal.place_eef,) = _struct_B.unpack(str[start:end])
      self.goal.place_eef = bool(self.goal.place_eef)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.support_surface_name = str[start:end].decode('utf-8')
      else:
        self.goal.support_surface_name = str[start:end]
      start = end
      end += 1
      (self.goal.allow_gripper_support_collision,) = _struct_B.unpack(str[start:end])
      self.goal.allow_gripper_support_collision = bool(self.goal.allow_gripper_support_collision)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.goal.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v99 = val1.header
        start = end
        end += 4
        (_v99.seq,) = _struct_I.unpack(str[start:end])
        _v100 = _v99.stamp
        _x = _v100
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v99.frame_id = str[start:end].decode('utf-8')
        else:
          _v99.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v101 = val1.target_point_offset
        _x = _v101
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v102 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v102.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v102.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v102.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v103 = val3.position
          _x = _v103
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v104 = val3.orientation
          _x = _v104
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v102.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v102.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _struct_3I.unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v102.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v102.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v105 = val3.position
          _x = _v105
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v106 = val3.orientation
          _x = _v106
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v102.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v107 = val1.header
        start = end
        end += 4
        (_v107.seq,) = _struct_I.unpack(str[start:end])
        _v108 = _v107.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v107.frame_id = str[start:end].decode('utf-8')
        else:
          _v107.frame_id = str[start:end]
        _v109 = val1.orientation
        _x = _v109
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _struct_d.unpack(str[start:end])
        _v110 = val1.target_pose
        _v111 = _v110.header
        start = end
        end += 4
        (_v111.seq,) = _struct_I.unpack(str[start:end])
        _v112 = _v111.stamp
        _x = _v112
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v111.frame_id = str[start:end].decode('utf-8')
        else:
          _v111.frame_id = str[start:end]
        _v113 = _v110.pose
        _v114 = _v113.position
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v115 = _v113.orientation
        _x = _v115
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _struct_i.unpack(str[start:end])
        _v116 = val1.sensor_pose
        _v117 = _v116.header
        start = end
        end += 4
        (_v117.seq,) = _struct_I.unpack(str[start:end])
        _v118 = _v117.stamp
        _x = _v118
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v117.frame_id = str[start:end].decode('utf-8')
        else:
          _v117.frame_id = str[start:end]
        _v119 = _v116.pose
        _v120 = _v119.position
        _x = _v120
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v121 = _v119.orientation
        _x = _v121
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
        self.goal.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planner_id = str[start:end].decode('utf-8')
      else:
        self.goal.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.allowed_touch_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.allowed_touch_objects.append(val1)
      start = end
      end += 8
      (self.goal.allowed_planning_time,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v122 = val1.translation
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v123 = val1.rotation
        _x = _v123
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v124 = val1.linear
        _x = _v124
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v125 = val1.angular
        _x = _v125
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v126 = val1.force
        _x = _v126
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v127 = val1.torque
        _x = _v127
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v128 = val1.object
        _v129 = _v128.header
        start = end
        end += 4
        (_v129.seq,) = _struct_I.unpack(str[start:end])
        _v130 = _v129.stamp
        _x = _v130
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v129.frame_id = str[start:end].decode('utf-8')
        else:
          _v129.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.id = str[start:end].decode('utf-8')
        else:
          _v128.id = str[start:end]
        _v131 = _v128.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v131.key = str[start:end].decode('utf-8')
        else:
          _v131.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v131.db = str[start:end].decode('utf-8')
        else:
          _v131.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v128.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v132 = val3.position
          _x = _v132
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v133 = val3.orientation
          _x = _v133
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v128.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _struct_3I.unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v128.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v134 = val3.position
          _x = _v134
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v135 = val3.orientation
          _x = _v135
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v128.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _struct_4d.unpack(str[start:end])
          _v128.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v136 = val3.position
          _x = _v136
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v137 = val3.orientation
          _x = _v137
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v128.plane_poses.append(val3)
        start = end
        end += 1
        (_v128.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v138 = val1.detach_posture
        _v139 = _v138.header
        start = end
        end += 4
        (_v139.seq,) = _struct_I.unpack(str[start:end])
        _v140 = _v139.stamp
        _x = _v140
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v139.frame_id = str[start:end].decode('utf-8')
        else:
          _v139.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v138.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v141 = val3.time_from_start
          _x = _v141
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v138.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _struct_B.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v142 = val1.header
        start = end
        end += 4
        (_v142.seq,) = _struct_I.unpack(str[start:end])
        _v143 = _v142.stamp
        _x = _v143
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.frame_id = str[start:end].decode('utf-8')
        else:
          _v142.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v144 = val1.transform
        _v145 = _v144.translation
        _x = _v145
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v146 = _v144.rotation
        _x = _v146
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = struct.unpack(pattern, str[start:end])
        val1.enabled = map(bool, val1.enabled)
        self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = struct.unpack(pattern, str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = map(bool, self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _struct_d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _struct_d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v147 = val1.color
        _x = _v147
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v148 = val1.header
        start = end
        end += 4
        (_v148.seq,) = _struct_I.unpack(str[start:end])
        _v149 = _v148.stamp
        _x = _v149
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v148.frame_id = str[start:end].decode('utf-8')
        else:
          _v148.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v150 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v150.key = str[start:end].decode('utf-8')
        else:
          _v150.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v150.db = str[start:end].decode('utf-8')
        else:
          _v150.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v151 = val2.position
          _x = _v151
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v152 = val2.orientation
          _x = _v152
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _struct_3I.unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v153 = val2.position
          _x = _v153
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v154 = val2.orientation
          _x = _v154
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _struct_4d.unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v155 = val2.position
          _x = _v155
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v156 = val2.orientation
          _x = _v156
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _struct_b.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _struct_B.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 28
      (_x.goal.planning_options.planning_scene_diff.is_diff, _x.goal.planning_options.plan_only, _x.goal.planning_options.look_around, _x.goal.planning_options.look_around_attempts, _x.goal.planning_options.max_safe_execution_cost, _x.goal.planning_options.replan, _x.goal.planning_options.replan_attempts, _x.goal.planning_options.replan_delay,) = _struct_3BidBid.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.is_diff = bool(self.goal.planning_options.planning_scene_diff.is_diff)
      self.goal.planning_options.plan_only = bool(self.goal.planning_options.plan_only)
      self.goal.planning_options.look_around = bool(self.goal.planning_options.look_around)
      self.goal.planning_options.replan = bool(self.goal.planning_options.replan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.attached_object_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.place_locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.place_locations:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v157 = val1.post_place_posture
        _v158 = _v157.header
        buff.write(_struct_I.pack(_v158.seq))
        _v159 = _v158.stamp
        _x = _v159
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v158.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v157.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v157.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v157.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v157.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v160 = val3.time_from_start
          _x = _v160
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v161 = val1.place_pose
        _v162 = _v161.header
        buff.write(_struct_I.pack(_v162.seq))
        _v163 = _v162.stamp
        _x = _v163
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v162.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v164 = _v161.pose
        _v165 = _v164.position
        _x = _v165
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v166 = _v164.orientation
        _x = _v166
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v167 = val1.pre_place_approach
        _v168 = _v167.direction
        _v169 = _v168.header
        buff.write(_struct_I.pack(_v169.seq))
        _v170 = _v169.stamp
        _x = _v170
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v169.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v171 = _v168.vector
        _x = _v171
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v167
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v172 = val1.post_place_retreat
        _v173 = _v172.direction
        _v174 = _v173.header
        buff.write(_struct_I.pack(_v174.seq))
        _v175 = _v174.stamp
        _x = _v175
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v174.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v176 = _v173.vector
        _x = _v176
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v172
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        length = len(val1.allowed_touch_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.allowed_touch_objects:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
      buff.write(_struct_B.pack(self.goal.place_eef))
      _x = self.goal.support_surface_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.goal.allow_gripper_support_collision))
      _x = self.goal.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.position_constraints:
        _v177 = val1.header
        buff.write(_struct_I.pack(_v177.seq))
        _v178 = _v177.stamp
        _x = _v178
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v177.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v179 = val1.target_point_offset
        _x = _v179
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v180 = val1.constraint_region
        length = len(_v180.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v180.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v180.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v180.primitive_poses:
          _v181 = val3.position
          _x = _v181
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v182 = val3.orientation
          _x = _v182
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v180.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v180.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v180.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v180.mesh_poses:
          _v183 = val3.position
          _x = _v183
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v184 = val3.orientation
          _x = _v184
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.orientation_constraints:
        _v185 = val1.header
        buff.write(_struct_I.pack(_v185.seq))
        _v186 = _v185.stamp
        _x = _v186
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v185.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v187 = val1.orientation
        _x = _v187
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.goal.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.path_constraints.visibility_constraints:
        buff.write(_struct_d.pack(val1.target_radius))
        _v188 = val1.target_pose
        _v189 = _v188.header
        buff.write(_struct_I.pack(_v189.seq))
        _v190 = _v189.stamp
        _x = _v190
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v189.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v191 = _v188.pose
        _v192 = _v191.position
        _x = _v192
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v193 = _v191.orientation
        _x = _v193
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_i.pack(val1.cone_sides))
        _v194 = val1.sensor_pose
        _v195 = _v194.header
        buff.write(_struct_I.pack(_v195.seq))
        _v196 = _v195.stamp
        _x = _v196
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v195.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v197 = _v194.pose
        _v198 = _v197.position
        _x = _v198
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v199 = _v197.orientation
        _x = _v199
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2dBd.pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.goal.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.allowed_touch_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.allowed_touch_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_d.pack(self.goal.allowed_planning_time))
      _x = self.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v200 = val1.translation
        _x = _v200
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v201 = val1.rotation
        _x = _v201
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v202 = val1.linear
        _x = _v202
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v203 = val1.angular
        _x = _v203
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v204 = val1.force
        _x = _v204
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v205 = val1.torque
        _x = _v205
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v206 = val1.object
        _v207 = _v206.header
        buff.write(_struct_I.pack(_v207.seq))
        _v208 = _v207.stamp
        _x = _v208
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v207.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v206.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v209 = _v206.type
        _x = _v209.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v209.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v206.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v206.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v206.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v206.primitive_poses:
          _v210 = val3.position
          _x = _v210
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v211 = val3.orientation
          _x = _v211
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v206.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v206.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v206.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v206.mesh_poses:
          _v212 = val3.position
          _x = _v212
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v213 = val3.orientation
          _x = _v213
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v206.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v206.planes:
          buff.write(val3.coef.tostring())
        length = len(_v206.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v206.plane_poses:
          _v214 = val3.position
          _x = _v214
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v215 = val3.orientation
          _x = _v215
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_b.pack(_v206.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
        _v216 = val1.detach_posture
        _v217 = _v216.header
        buff.write(_struct_I.pack(_v217.seq))
        _v218 = _v217.stamp
        _x = _v218
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v217.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v216.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v216.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v216.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v216.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v219 = val3.time_from_start
          _x = _v219
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_d.pack(val1.weight))
      buff.write(_struct_B.pack(self.goal.planning_options.planning_scene_diff.robot_state.is_diff))
      _x = self.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v220 = val1.header
        buff.write(_struct_I.pack(_v220.seq))
        _v221 = _v220.stamp
        _x = _v221
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v220.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v222 = val1.transform
        _v223 = _v222.translation
        _x = _v223
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v224 = _v222.rotation
        _x = _v224
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.padding))
      length = len(self.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.scale))
      length = len(self.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v225 = val1.color
        _x = _v225
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v226 = val1.header
        buff.write(_struct_I.pack(_v226.seq))
        _v227 = _v226.stamp
        _x = _v227
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v226.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v228 = val1.type
        _x = _v228.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v228.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_struct_B.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v229 = val2.position
          _x = _v229
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v230 = val2.orientation
          _x = _v230
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v231 = val2.position
          _x = _v231
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v232 = val2.orientation
          _x = _v232
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v233 = val2.position
          _x = _v233
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v234 = val2.orientation
          _x = _v234
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_b.pack(val1.operation))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary))
      _x = self.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution))
      length = len(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.data.tostring())
      _x = self
      buff.write(_struct_3BidBid.pack(_x.goal.planning_options.planning_scene_diff.is_diff, _x.goal.planning_options.plan_only, _x.goal.planning_options.look_around, _x.goal.planning_options.look_around_attempts, _x.goal.planning_options.max_safe_execution_cost, _x.goal.planning_options.replan, _x.goal.planning_options.replan_attempts, _x.goal.planning_options.replan_delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = moveit_msgs.msg.PlaceGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.group_name = str[start:end].decode('utf-8')
      else:
        self.goal.group_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.attached_object_name = str[start:end].decode('utf-8')
      else:
        self.goal.attached_object_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.place_locations = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PlaceLocation()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v235 = val1.post_place_posture
        _v236 = _v235.header
        start = end
        end += 4
        (_v236.seq,) = _struct_I.unpack(str[start:end])
        _v237 = _v236.stamp
        _x = _v237
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v236.frame_id = str[start:end].decode('utf-8')
        else:
          _v236.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v235.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v235.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v235.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v238 = val3.time_from_start
          _x = _v238
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v235.points.append(val3)
        _v239 = val1.place_pose
        _v240 = _v239.header
        start = end
        end += 4
        (_v240.seq,) = _struct_I.unpack(str[start:end])
        _v241 = _v240.stamp
        _x = _v241
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v240.frame_id = str[start:end].decode('utf-8')
        else:
          _v240.frame_id = str[start:end]
        _v242 = _v239.pose
        _v243 = _v242.position
        _x = _v243
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v244 = _v242.orientation
        _x = _v244
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v245 = val1.pre_place_approach
        _v246 = _v245.direction
        _v247 = _v246.header
        start = end
        end += 4
        (_v247.seq,) = _struct_I.unpack(str[start:end])
        _v248 = _v247.stamp
        _x = _v248
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v247.frame_id = str[start:end].decode('utf-8')
        else:
          _v247.frame_id = str[start:end]
        _v249 = _v246.vector
        _x = _v249
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v245
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v250 = val1.post_place_retreat
        _v251 = _v250.direction
        _v252 = _v251.header
        start = end
        end += 4
        (_v252.seq,) = _struct_I.unpack(str[start:end])
        _v253 = _v252.stamp
        _x = _v253
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v252.frame_id = str[start:end].decode('utf-8')
        else:
          _v252.frame_id = str[start:end]
        _v254 = _v251.vector
        _x = _v254
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v250
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.allowed_touch_objects = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.allowed_touch_objects.append(val2)
        self.goal.place_locations.append(val1)
      start = end
      end += 1
      (self.goal.place_eef,) = _struct_B.unpack(str[start:end])
      self.goal.place_eef = bool(self.goal.place_eef)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.support_surface_name = str[start:end].decode('utf-8')
      else:
        self.goal.support_surface_name = str[start:end]
      start = end
      end += 1
      (self.goal.allow_gripper_support_collision,) = _struct_B.unpack(str[start:end])
      self.goal.allow_gripper_support_collision = bool(self.goal.allow_gripper_support_collision)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.goal.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v255 = val1.header
        start = end
        end += 4
        (_v255.seq,) = _struct_I.unpack(str[start:end])
        _v256 = _v255.stamp
        _x = _v256
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v255.frame_id = str[start:end].decode('utf-8')
        else:
          _v255.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v257 = val1.target_point_offset
        _x = _v257
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v258 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v258.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v258.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v258.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v259 = val3.position
          _x = _v259
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v260 = val3.orientation
          _x = _v260
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v258.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v258.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v258.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v258.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v261 = val3.position
          _x = _v261
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v262 = val3.orientation
          _x = _v262
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v258.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v263 = val1.header
        start = end
        end += 4
        (_v263.seq,) = _struct_I.unpack(str[start:end])
        _v264 = _v263.stamp
        _x = _v264
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v263.frame_id = str[start:end].decode('utf-8')
        else:
          _v263.frame_id = str[start:end]
        _v265 = val1.orientation
        _x = _v265
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _struct_d.unpack(str[start:end])
        _v266 = val1.target_pose
        _v267 = _v266.header
        start = end
        end += 4
        (_v267.seq,) = _struct_I.unpack(str[start:end])
        _v268 = _v267.stamp
        _x = _v268
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v267.frame_id = str[start:end].decode('utf-8')
        else:
          _v267.frame_id = str[start:end]
        _v269 = _v266.pose
        _v270 = _v269.position
        _x = _v270
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v271 = _v269.orientation
        _x = _v271
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _struct_i.unpack(str[start:end])
        _v272 = val1.sensor_pose
        _v273 = _v272.header
        start = end
        end += 4
        (_v273.seq,) = _struct_I.unpack(str[start:end])
        _v274 = _v273.stamp
        _x = _v274
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v273.frame_id = str[start:end].decode('utf-8')
        else:
          _v273.frame_id = str[start:end]
        _v275 = _v272.pose
        _v276 = _v275.position
        _x = _v276
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v277 = _v275.orientation
        _x = _v277
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _struct_2dBd.unpack(str[start:end])
        self.goal.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planner_id = str[start:end].decode('utf-8')
      else:
        self.goal.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.allowed_touch_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.allowed_touch_objects.append(val1)
      start = end
      end += 8
      (self.goal.allowed_planning_time,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v278 = val1.translation
        _x = _v278
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v279 = val1.rotation
        _x = _v279
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v280 = val1.linear
        _x = _v280
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v281 = val1.angular
        _x = _v281
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v282 = val1.force
        _x = _v282
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v283 = val1.torque
        _x = _v283
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v284 = val1.object
        _v285 = _v284.header
        start = end
        end += 4
        (_v285.seq,) = _struct_I.unpack(str[start:end])
        _v286 = _v285.stamp
        _x = _v286
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v285.frame_id = str[start:end].decode('utf-8')
        else:
          _v285.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v284.id = str[start:end].decode('utf-8')
        else:
          _v284.id = str[start:end]
        _v287 = _v284.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v287.key = str[start:end].decode('utf-8')
        else:
          _v287.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v287.db = str[start:end].decode('utf-8')
        else:
          _v287.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v284.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v288 = val3.position
          _x = _v288
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v289 = val3.orientation
          _x = _v289
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v284.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v284.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v290 = val3.position
          _x = _v290
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v291 = val3.orientation
          _x = _v291
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v284.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v284.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v292 = val3.position
          _x = _v292
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v293 = val3.orientation
          _x = _v293
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v284.plane_poses.append(val3)
        start = end
        end += 1
        (_v284.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v294 = val1.detach_posture
        _v295 = _v294.header
        start = end
        end += 4
        (_v295.seq,) = _struct_I.unpack(str[start:end])
        _v296 = _v295.stamp
        _x = _v296
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v295.frame_id = str[start:end].decode('utf-8')
        else:
          _v295.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v294.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v297 = val3.time_from_start
          _x = _v297
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v294.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _struct_B.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v298 = val1.header
        start = end
        end += 4
        (_v298.seq,) = _struct_I.unpack(str[start:end])
        _v299 = _v298.stamp
        _x = _v299
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v298.frame_id = str[start:end].decode('utf-8')
        else:
          _v298.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v300 = val1.transform
        _v301 = _v300.translation
        _x = _v301
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v302 = _v300.rotation
        _x = _v302
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = map(bool, val1.enabled)
        self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = map(bool, self.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _struct_d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _struct_d.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v303 = val1.color
        _x = _v303
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v304 = val1.header
        start = end
        end += 4
        (_v304.seq,) = _struct_I.unpack(str[start:end])
        _v305 = _v304.stamp
        _x = _v305
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v304.frame_id = str[start:end].decode('utf-8')
        else:
          _v304.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v306 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v306.key = str[start:end].decode('utf-8')
        else:
          _v306.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v306.db = str[start:end].decode('utf-8')
        else:
          _v306.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v307 = val2.position
          _x = _v307
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v308 = val2.orientation
          _x = _v308
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v309 = val2.position
          _x = _v309
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v310 = val2.orientation
          _x = _v310
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v311 = val2.position
          _x = _v311
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v312 = val2.orientation
          _x = _v312
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _struct_b.unpack(str[start:end])
        self.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _struct_B.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 28
      (_x.goal.planning_options.planning_scene_diff.is_diff, _x.goal.planning_options.plan_only, _x.goal.planning_options.look_around, _x.goal.planning_options.look_around_attempts, _x.goal.planning_options.max_safe_execution_cost, _x.goal.planning_options.replan, _x.goal.planning_options.replan_attempts, _x.goal.planning_options.replan_delay,) = _struct_3BidBid.unpack(str[start:end])
      self.goal.planning_options.planning_scene_diff.is_diff = bool(self.goal.planning_options.planning_scene_diff.is_diff)
      self.goal.planning_options.plan_only = bool(self.goal.planning_options.plan_only)
      self.goal.planning_options.look_around = bool(self.goal.planning_options.look_around)
      self.goal.planning_options.replan = bool(self.goal.planning_options.replan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d3I = struct.Struct("<7d3I")
_struct_B = struct.Struct("<B")
_struct_3BidBid = struct.Struct("<3BidBid")
_struct_d = struct.Struct("<d")
_struct_2f = struct.Struct("<2f")
_struct_2i = struct.Struct("<2i")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_b = struct.Struct("<b")
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2dBd = struct.Struct("<2dBd")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
